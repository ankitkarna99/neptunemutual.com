---
import { Api } from "../../types/enum";
import { stripTags } from "../../util/strip-tags";
import Icon from "../elements/Icon.astro";
import Pagination from "../elements/Pagination.astro";

interface Props {
  renderConfig: TableRenderConfig<any>[];
  data: Object[];
}

const { renderConfig, data } = Astro.props;
const columnHeaders = renderConfig.map((config) => config.label);
const sortableColumns = renderConfig
  .filter((config) => config.sortable)
  .map((config) => config.label);
const searchableColumns = renderConfig.filter((config) => config.searchable);
---

<div class="transaction table container">
  <div class="table wrapper">
    <div class="table prefix">
      <slot name="table-prefix" />
    </div>
    <table data-page="1" data-sort-key="">
      <thead>
        <tr>
          {
            columnHeaders.map((header, index) => {
              const isDescription = renderConfig[index].isDescription;
              const isLink = renderConfig[index].isLink;

              return (
                <th class={isDescription ? "center" : isLink ? "right" : ""}>
                  {sortableColumns.includes(header) ? (
                    <button>
                      <span>{header}</span>
                      <Icon variant="arrow-down" />
                    </button>
                  ) : (
                    <span>{header}</span>
                  )}
                </th>
              );
            })
          }
        </tr>
      </thead>
      <tbody>
        {
          data.map((row, dataIndex) => (
            <>
              <tr>
                {columnHeaders.map((header, index) => {
                  const isDescription = renderConfig[index].isDescription;
                  const isLink = renderConfig[index].isLink;

                  if (isDescription) {
                    return (
                      <td data-index={dataIndex}>
                        <i class="icon chevron down" />
                      </td>
                    );
                  }

                  if (isLink) {
                    return (
                      <td>
                        <a
                          href={renderConfig[index].render(row)}
                          target="_blank"
                        >
                          <i class="icon external link" />
                        </a>
                      </td>
                    );
                  }

                  return (
                    <td>
                      <span>{renderConfig[index].render(row)}</span>
                    </td>
                  );
                })}
              </tr>
              <tr
                class="description initially hidden"
                data-index="${dataIndex}"
              >
                <td colspan="${renderConfig.length}">
                  <div class="description wrapper">
                    <div class="description content">
                      {stripTags(
                        renderConfig
                          .find((config) => config.isDescription)!
                          .render(row)
                      )}
                    </div>
                  </div>
                </td>
              </tr>
            </>
          ))
        }
      </tbody>
    </table>
    <div class="table footer">
      <Pagination
        className="no padding"
        type={Api.Blog}
        currentPage={1}
        totalPages={2}
      />
    </div>
  </div>
</div>

<script>
  const togglers = document.querySelectorAll("td[data-index]");

  const getTextNodeHeight = (textNode: Node) => {
    var height = 0;
    if (document.createRange) {
      var range = document.createRange();
      range.selectNodeContents(textNode);
      if (range.getBoundingClientRect) {
        var rect = range.getBoundingClientRect();
        if (rect) {
          height = rect.bottom - rect.top;
        }
      }
    }
    return height;
  };

  // Add event listeners to fire confetti when a button is clicked.
  togglers.forEach((toggler) => {
    toggler.addEventListener("click", () => {
      toggler.classList.toggle("inverted");
      toggleDescription((toggler as HTMLElement).dataset.index!);
    });
  });

  const toggleDescription = (index: string) => {
    const descriptionRow = document.querySelector(`tr[data-index="${index}"]`)!;

    descriptionRow.classList.toggle("hidden");

    const descriptionWrapper = descriptionRow.querySelector(
      ".description.wrapper"
    )! as HTMLElement;
    const descriptionContent = descriptionWrapper.querySelector(
      ".description.content"
    )! as HTMLElement;

    console.log(descriptionContent);
    console.log(descriptionContent.firstChild!.nodeType === Node.TEXT_NODE);
    console.log(`${getTextNodeHeight(descriptionContent.firstChild!)}px`);

    descriptionWrapper.style.height = `${getTextNodeHeight(
      descriptionContent.firstChild!
    )}px`;
  };
</script>

<script define:vars={{ renderConfig }}>
  const getTableCell = (row, dataIndex) =>
    columnHeaders
      .map((header, index) => {
        const isDescription = renderConfig[index].isDescription;
        const isLink = renderConfig[index].isLink;

        if (isDescription) {
          return `<td data-index="${dataIndex}">
                  <i class="icon chevron down" />
                </td>`;
        }

        if (isLink) {
          return `<td>
                        <a href="${renderConfig[index].render(
                          row
                        )}" target="_blank">
                          <i class="icon external link"></i>
                        </a>
                      </td>`;
        }

        return `<td>
                <span>${renderConfig[index].render(row)}</span>
              </td>`;
      })
      .join("\n");

  const getTableRows = (data) =>
    data
      .map(
        (row, dataIndex) => `
              <tr>
                ${getTableCell(row, dataIndex)}
              </tr>
              <tr class="description initially hidden" data-index="${dataIndex}">
                <td colspan="${renderConfig.length}">
                  <div class="description wrapper">
                    <div
                      class="description content">
                      ${stripTags(
                        renderConfig
                          .find((config) => config.isDescription)
                          .render(row)
                      )}
                    </div>
                  </div>
                </td>
              </tr>
`
      )
      .join("\n");

  const filterHackData = async () => {
    try {
      console.log(renderConfig);
      const table = document.querySelector("table");
      const response = await (
        await fetch("https://cms.neptunemutual.net/api/hacks?limit=5")
      ).json();

      const html = getTableRows(response.docs);

      // alert(html);

      // table.querySelector("tbody").innerHTML = html;
    } catch (err) {
      console.log(err);
    }
  };

  // self executing function here
  (function () {
    filterHackData();
  })();
</script>
