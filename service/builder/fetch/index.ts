/* ----------------------------------------- */
// Do not edit this file
/* ----------------------------------------- */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment

import { env } from '../../../util/env.js'
import { get } from './request.js'

const resources: ApiResource[] = [
  ['contracts', 'https://api.neptunemutual.net/protocol/contracts', true],
  ['media', 'api/media?limit=1000'],
  ['blog', 'api/articles?limit=1000'],
  ['pressroom', 'api/pressroom?limit=1000'],
  ['ecosystems', 'api/ecosystems?limit=1000'],
  ['pages', 'api/pages?limit=1000'],
  ['roadmap', 'api/roadmap?limit=1000'],
  ['vacancies', 'api/vacancies?limit=1000'],
  ['audits', 'api/audits?limit=1000'],
  ['news', 'api/news?limit=1000'],
  ['programs', 'api/programs?limit=1000'],
  ['videos', 'api/videos?limit=1000']
]

const build = (): Array<Promise<{ url: string, identifier: string, string: string }>> => {
  const promises: Array<Promise<{ url: string, identifier: string, string: string }>> = []

  for (const resource of resources) {
    const [identifier, path, fqu] = resource
    const origin: string = env('WEBSITE_API_ORIGIN')

    // fully qualified uri
    const url = fqu === undefined ? `${origin}/${path}` : path

    promises.push(get(url, identifier))
  }

  return promises
}

const fetchFromApi = async (): Promise<Array<{ identifier: string, data: string }>> => {
  const result = []

  const tasks = build()
  const items = await Promise.allSettled(tasks) as Array<{ status: 'fulfilled' | 'rejected', value: { identifier: string, string: string } }>

  for (const item of items) {
    if (item === null || item === undefined) {
      continue
    }

    const { value: { identifier, string } } = item
    result.push({ identifier, data: JSON.parse(string) })
  }

  return result
}

export { fetchFromApi }
