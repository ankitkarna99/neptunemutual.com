/* ----------------------------------------- */
// Do not edit this file
/* ----------------------------------------- */

import path from 'path'

import { env } from '../../../util/env'
import * as io from '../../../util/io'
import { get } from '../fetch/request'
import { config } from './config'

const resources = ['sitemap.xml', 'blog/atom.xml', 'blog/rss.xml', 'pressroom/atom.xml', 'pressroom/rss.xml']

const build = (): Array<Promise<{ url: string, identifier: string, string: string }>> => {
  const promises: Array<Promise<{ url: string, identifier: string, string: string }>> = []

  for (const resource of resources) {
    const origin: string = env('WEBSITE_API_ORIGIN')

    const url = `${origin}/${resource}`

    promises.push(get(url, resource))
  }

  return promises
}

const start = async (): Promise<void> => {
  const tasks = build()
  const items = await Promise.allSettled(tasks) as Array<{ status: 'fulfilled' | 'rejected', value: { identifier: string, string: string } }>

  for (const item of items) {
    if (item === null || item === undefined) {
      continue
    }

    const { value: { identifier, string } } = item

    const file = path.join(config.root, identifier)
    await io.saveToDiskRaw(file, string)
  }
}

const sync = async (): Promise<void> => {
  await start()
}

export { sync }
