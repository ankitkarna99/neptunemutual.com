/* ----------------------------------------- */
// Do not edit this file
/* ----------------------------------------- */

import fs from 'fs'
import https from 'https'

import { exists } from '../../../util/io'

const download = async (url: string, dest: string): Promise<void> => {
  if (await exists(dest)) {
    console.log('Download skipped: %s', url)
    return
  }

  return await new Promise((resolve, reject) => {
    console.log('Downloading: %s', url)

    https.get(url, (response) => {
      if (response.statusCode !== null && response.statusCode !== undefined && response.statusCode !== 200) {
        reject(new Error(`Failed to download file: ${response.statusCode}`))
        return
      }

      const file = fs.createWriteStream(dest)

      response.on('data', (data) => {
        file.write(data)
      })

      response.on('end', () => {
        file.end()

        console.log('Downloaded: %s', url)
        resolve()
      })
    }).on('error', (error) => {
      fs.unlink(dest, () => {
        reject(error)
      })
    })
  })
}

const downloadFile = async (file: FileDownloadArgs): Promise<void> => {
  try {
    await download(file.remote, file.local)
  } catch (error) {
    console.error(error)
    // continue downloads
  }
}

export { downloadFile }
